*** DIA 01 - Introdução ao React ***

React é uma biblioteca JavaScript
Ele usa o npm (Node Package Manager)

uuid - é um pacote do npm que gera uma string única com 16 caracteres, podendo ser usado para criar um id único para a aplicação

Para começar a usar o npm:

npm init -y: -y é uma flag que diz yes para todas as perguntas que o npm faz ao ser iniciado
alterar o 'test' no package.json para 'jest'
npm install --save-dev jest: instala o jest como uma dependência de desenvolvimento para que os testes possam ser feitos
criar o arquivo .gitignore e adicionar o node_modules dentro dele
npm i react: instala o react como dependência do projeto
npm install --save-dev prop-types: instala o PropTypes como dev dependency

diferenças entre o npm e npx: o npm instala o pacote no seu projeto, o npx só executa o pacote

se utilizar o comando npm create-react-app <nome_do_projeto>: ele já instala o react sem a necessidade de usar o npm init

npm start: inicia o servidor npm para que o projeto seja desenvolvido

nvm --version: mostra a versão do nvm instalado

JSX (JavaScript Syntax Extension)
é uma extensão de sintaxe para o JavaScript e é utilizada no React.
Ele só funciona/roda em ambiente React

classes agrupam funções que fazem sentido estarem juntas

links do recursos adicionais:
história do React: https://medium.com/@ppternunes/a-hist%C3%B3ria-do-react-ba346c416fe1
5 coisas para não fazer com o React: https://blog.logrocket.com/5-things-not-do-building-react-applications/
5 formas diferentes de usar o CSS no React: https://www.w3schools.com/react/react_css.asp
documentação Import: https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/import
documentação Classes: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes
criando um app com API: https://betterprogramming.pub/creating-a-simple-app-with-react-js-f6aa88998952
guia completo do React: https://tableless.com.br/guia-completo-react-ecossistema/


*** DIA 02 ***
PropTypes

MeuComponente.propTypes = {
  // Todos os validadores aqui são, por padrão, validadores opcionais.
  // Para torná-los obrigatórios basta adicionar .isRequired
  numeroObrigatório: PropTypes.number.isRequired,

  // Tipos básico do JS.
  stringOpcional: PropTypes.string,
  numeroOpcional: PropTypes.number,
  booleanoOpcional: PropTypes.bool,
  funcaoOpcional: PropTypes.func,
  objetoOpcional: PropTypes.object,
  arrayOpcional: PropTypes.array,

  // Um array de determinado tipo básico
  arrayDe: PropTypes.arrayOf(PropTypes.number),

  // Um objeto de determinado tipo básico
  objetoDe: PropTypes.objectOf(PropTypes.number),

  // Um objeto com forma específica
  objetoComForma: PropTypes.shape({
    name: PropTypes.string,
    age: PropTypes.number,
  }),

  // Um objeto que não permite props extras
  objetoComFormatoRigoroso: PropTypes.exact({
    name: PropTypes.string,
    quantity: PropTypes.number,
    avaibility: PropTypes.bool,
  }),
};

links do recursos adicionais:
Index as a key is an anti-pattern, por Robin Pakorny: https://robinpokorny.medium.com/index-as-a-key-is-an-anti-pattern-e0349aece318
React - PropTypes: https://pt-br.reactjs.org/docs/typechecking-with-proptypes.html#proptypes
ReactJS - Documentação oficial do React: https://pt-br.reactjs.org/
W3Schools - React Components: https://www.w3schools.com/react/react_components.asp
W3Schools - React Props: https://www.w3schools.com/react/react_props.asp
Medium - React JS — Understanding Functional & Class Components: https://codeburst.io/react-js-understanding-functional-class-components-e65d723e909?gi=ed8f5096b528
FullStack React - Repeating Elements: https://www.newline.co/fullstack-react/30-days-of-react/day-13/#repeating-elements
freeCodeCamp - Exercise: https://www.freecodecamp.org/learn/front-end-development-libraries/react/write-a-react-component-from-scratch
Bit - Discover Components: https://bit.dev/components
React Basics - Understanding React PropTypes - Episode #8: https://www.youtube.com/watch?v=XLthy2j_CCQ
